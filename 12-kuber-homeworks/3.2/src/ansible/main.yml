#=============================================== The Beginning of the Copyright Notice ===================================================
# The AUTHOR of this file and the owner of all exclusive rights in this file is Alexander Borisovich Prokopyev
# born on December 20, 1977 resident of the city of Kurgan, Russia;
# Series and Russian passport number of the AUTHOR (only the last two digits for each one): **22-****91
# Russian Individual Taxpayer Number of the AUTHOR (only the last four digits): ********2007
# Russian Insurance Number of Individual Ledger Account of the AUTHOR (only the last five digits): ***-***-859 04
# Copyright (C) Alexander B. Prokopyev, 2024, All Rights Reserved.
# Contact of the AUTHOR: a.prokopyev.resume at gmail dot com
# WWW: https://github.com/a-prokopyev-resume/devops-netology
#
# All source code and other content contained in this file is protected by copyright law.
# This file is licensed by the AUTHOR under AGPL v3 (GNU Affero General Public License): https://www.gnu.org/licenses/agpl-3.0.en.html
#
# THIS FILE IS LICENSED ONLY PROVIDED FOLLOWING RESTRICTIONS ALSO APPLY:
# Nobody except the AUTHOR may alter or remove this copyright notice from any copies of this file content (including modified fragments).
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
#
# ATTENTION: If potential user's or licensee's country laws collide or are not compatible with the terms of this copyright notice or 
# if a potential user or licensee does not agree with the terms of this copyright notice then such potential user or licensee  
# is STRONGLY PROHIBITED to use this file by any method.
#================================================== The End of the Copyright Notice ======================================================

# Need to automate vm host names substitution using a dictionary or like it in a single place.

---
- name: Create VMs - Play
  hosts: localhost
  tasks:

    - name: Lesson name
      ansible.builtin.set_fact:
        Lesson: "netology-12-kuber"

    - name: Amount of k0s master nodes
      ansible.builtin.set_fact:
        MasterAmount: 1

    - name: Amount of k0s worker nodes
      ansible.builtin.set_fact:
        WorkerAmount: 1

    - name: Generate Ed25519 SSH key
      ansible.builtin.openssh_keypair:
        path: "~/.ssh/id_ed25519"
        type: "ed25519"

#    - name: Copy SSH public key to another lesson infrastructure playbook
#      copy:
#        src: ~/.ssh/id_ed25519.pub
#        dest: ./infrastructure/files/id_rsa.pub

    - name: Destroy old VMs by Terraform
      community.general.terraform:
        project_path: ../terraform
        state: absent
      tags:
        - destroy
        - terraform

#    - name: Set default value for variable using set_fact
#      set_fact:
#        TF_State: "{{ TF_State | default('present') }}"
#    - name: Print TF_State
#      ansible.builtin.debug:
#        msg: "Requested Terraform state: {{ TF_State }}"

#    environment:
#    TF_LOG: DEBUG

    - name: Create VMs by Terraform
      community.general.terraform:
        project_path: ../terraform
        state: present
#"{{ TF_State }}"        
        complex_vars: true
        variables: # NO SPACES and NO COMMENTS near '=' operator are allowed !!!  Correct: var1=value1
          group="{{ Lesson }}"
          default_zone="ru-central1-a"
          disk_size=10
          disk_type="network-ssd"
          image_family="debian-11"
          is_temporary=true
          amount={{ MasterAmount + WorkerAmount }}
          platform_id="standard-v2"
          cores=2
          core_fraction=20
          ram=1
# Add SWAP for small nodes later
# K0S needs 2Gb RAM, 2 CPU cores with 100% fraction 
#=== Examples:
#          disk_type="network-ssd"
#          disk_size=5
#         disk_type="network-ssd"
#         disk_size=5
#	  image_family="ubuntu-2204-lts"
#         image_family="centos-7"
#	  image_family="almalinux-8"
#         image_family="debian-12"
#         image_family="container-optimized-image"
#	  default_zone="ru-central1-d" # D has some limitations compared to A in terms of smaller VMs
#         default_cidr=["10.0.1.0/24"]
#	  cores=2 # minimal 2 for standard-v1 platform          
#	  core_fraction=20 # Only 20 allowed for temporary stadard-v1 # Other allowed values for other types of VMs: 20 | 50 | 100
#	  disk_size=93 # Shall be N*93 (Gb) for network-ssd-nonreplicated, at least  10 (Gb) for other types of storage
#	  disk_type="network-ssd" # allows smaller size, but is about 1.5-2 times slower than two following SSD types
#	  disk_type="network-ssd-nonreplicated" # at least 93M, the most FAST !
#	  disk_type="network-ssd-io-m3" # at least 93M, FAST !
      environment:
        TF_LOG: DEBUG
      register: TerraformResult
      tags: 
        - create
        - terraform

    - name: Get IP addresses of new VMs created by Terraform module
      ansible.builtin.set_fact:
        vm_ips: "{{ TerraformResult.outputs.vm_ips.value }}"

    - name: Get SSH user name for new VMs created by Terraform module
      ansible.builtin.set_fact:
        vm_ssh_user_name: "{{ TerraformResult.outputs.vm_ssh_user_name.value }}"

    - name: Print IP
      ansible.builtin.debug:
        msg: "IP addresses are {{ vm_ips }}"
#        msg: "The first IP address is {{ vm_ips[0] }}"

#    - name: Restore original inventory template
#      copy:
#        src: ./infrastructure/inventory/cicd/hosts.yml.bak
#        dest: ./infrastructure/inventory/cicd/hosts.yml

#    - name: Update host1 value in lesson inventory
#      ansible.builtin.lineinfile:
#        path: ./infrastructure/inventory/cicd/hosts.yml
#        regexp: '^(\s*)ansible_host:\s*<master>'
#        line: '\1ansible_host: master'
#        backrefs: yes

#    - name: Update host2 value in lesson inventory
#      ansible.builtin.lineinfile:
#        path: ./infrastructure/inventory/cicd/hosts.yml
#        regexp: '^(\s*)ansible_host:\s*<agent>'
#        line: '\1ansible_host: agent'
#        backrefs: yes

#    - name: Update ansible_user value in lesson inventory
#      ansible.builtin.lineinfile:
#        path: ./infrastructure/inventory/cicd/hosts.yml
#        regexp: '^(\s*)ansible_user:\s*<user>'
#        line: '\1ansible_user: {{ vm_ssh_user_name }}'
#        backrefs: yes

    - name: Generate yaml file for K8s cluster configuration
      ansible.builtin.template:
        src: yc-k0sctl-cluster.yml.j2
        dest: yc-k0sctl-cluster.yml

    - name: Generate yaml file for K8s cluster configuration
      ansible.builtin.copy:
        content: |
          hosts:
          {% set MasterAmount = 1 %}
          {% for ip in vm_ips %}
            {% if loop.index <= MasterAmount %}
              {% set Name = 'master' ~ ((loop.index)|string) %}
          - role: controller
            name: {{ Name }}
            ssh:
              address: {{ ip }}
              user: root
              port: 22
              keyPath: ~/.ssh/id_rsa
            {% else %}
              {% set Name = 'worker' ~ ((loop.index-MasterAmount)|string) %}
          - role: worker
            name: {{ Name }}
            ssh:
              address: {{ ip }}
            {% endif %}
          {{ ip }} 
          {% endfor %}
        dest: yc-k0sctl-cluster.yml
      tags: 
        - ignore

    - name: Update /etc/hosts2 file
      ansible.builtin.copy:
        content: |
          {% for ip in vm_ips %}
          {{ ip }} {{ 'master' if loop.index == 1 else 'worker' ~ ((loop.index-1)|string) }}
          {% endfor %}
        dest: /etc/hosts2

    - name: Update /etc/hosts file
      ansible.builtin.shell: cp /etc/hosts2 /etc/hosts

    - name: Update /etc/ssh/ssh_config file
      ansible.builtin.lineinfile:
        path: /etc/ssh/ssh_config
        create: yes
        line: |
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          Host master agent
            User netology

#    - name: Execute playbook for waiting hosts to get started
#      ansible.builtin.shell: ansible-playbook -i infrastructure/inventory/cicd/hosts.yml wait.yml
#      register: AnsibleResult1
#      tags: 
#        - provision
      
#    - name: Print execution results
#      ansible.builtin.debug:
#        msg:  "{{ AnsibleResult1 }}"
#      tags: 
#        - provision

#    - name: Execute lesson infrastructure playbook for installing required CI/CD services
#      ansible.builtin.shell: ansible-playbook -i infrastructure/inventory/cicd/hosts.yml infrastructure/site.yml
#      register: AnsibleResult2
#      tags: 
#        - provision

#    - name: Print execution results
#      ansible.builtin.debug:
#        msg:  "{{ AnsibleResult2 }}"
#      tags: 
#        - provision

#    - name: Get admin access key
#      ansible.builtin.shell: cat /var/lib/jenkins/secrets/initialAdminPassword
#      register: AnsibleResult3
#      tags: 
#        - provision

#    - name: Print admin access key
#      ansible.builtin.debug:
#        msg:  "{{ AnsibleResult3 }}"
#      tags: 
#        - provision

# =====> UNUSED Examples:

